import unittest
from ticTacToeV1 import *

class MyTest(unittest.TestCase):
    def setup(self):
        pass

    def test_choose_starting_player(self):
        player_list = ['Player X', 'Player O']
        self.assertIn(choose_starting_player('Player X', 'Player O'), player_list)


    def test_determine_second_player_identity(self):
        self.assertEqual(determine_second_player_identity('Player X'),'Player O')
        self.assertEqual(determine_second_player_identity('Player O'), 'Player X')
        self.assertNotEqual(determine_second_player_identity('Player O'), 'Player O')
        self.assertNotEqual(determine_second_player_identity('Player O'), 'Player O')
        self.assertNotEqual(determine_second_player_identity('Player X'), 'Player X')
        self.assertNotEqual(determine_second_player_identity('Player X'), 'Player X')


    def test_make_move(self):
        self.assertEqual(make_move('Player X'), 'X')
        self.assertEqual(make_move('Player O'), 'O')
        self.assertNotEqual(make_move('Player X'), 'O')
        self.assertNotEqual(make_move('Player O'), 'X')

    def test_verify_numerical_selection_for_move_condition1(self):
        self.assertGreaterEqual(verify_numerical_selection_for_move('0'), 0)
        self.assertGreaterEqual(verify_numerical_selection_for_move('1'), 0)
        self.assertGreaterEqual(verify_numerical_selection_for_move('2'), 0)
        self.assertGreaterEqual(verify_numerical_selection_for_move('3'), 0)
        self.assertGreaterEqual(verify_numerical_selection_for_move('4'), 0)
        self.assertGreaterEqual(verify_numerical_selection_for_move('5'), 0)
        self.assertGreaterEqual(verify_numerical_selection_for_move('6'), 0)
        self.assertGreaterEqual(verify_numerical_selection_for_move('7'), 0)
        self.assertGreaterEqual(verify_numerical_selection_for_move('8'), 0)

    def test_verify_numerical_selection_for_move_condition2(self):
        self.assertLessEqual(verify_numerical_selection_for_move('0'), 8)
        self.assertLessEqual(verify_numerical_selection_for_move('1'), 8)
        self.assertLessEqual(verify_numerical_selection_for_move('2'), 8)
        self.assertLessEqual(verify_numerical_selection_for_move('3'), 8)
        self.assertLessEqual(verify_numerical_selection_for_move('4'), 8)
        self.assertLessEqual(verify_numerical_selection_for_move('5'), 8)
        self.assertLessEqual(verify_numerical_selection_for_move('6'), 8)
        self.assertLessEqual(verify_numerical_selection_for_move('7'), 8)
        self.assertLessEqual(verify_numerical_selection_for_move('8'), 8)

    def test_verify_numerical_selection_for_move_condition3(self):
        self.assertEqual(verify_numerical_selection_for_move('0'), 0)
        self.assertEqual(verify_numerical_selection_for_move('1'), 1)
        self.assertEqual(verify_numerical_selection_for_move('2'), 2)
        self.assertEqual(verify_numerical_selection_for_move('3'), 3)
        self.assertEqual(verify_numerical_selection_for_move('4'), 4)
        self.assertEqual(verify_numerical_selection_for_move('5'), 5)
        self.assertEqual(verify_numerical_selection_for_move('6'), 6)
        self.assertEqual(verify_numerical_selection_for_move('7'), 7)
        self.assertEqual(verify_numerical_selection_for_move('8'), 8)

    def test_verify_numerical_selection_for_move_condition4(self):
        self.assertNotEqual(verify_numerical_selection_for_move('0'), 1)
        self.assertNotEqual(verify_numerical_selection_for_move('0'), 2)
        self.assertNotEqual(verify_numerical_selection_for_move('0'), 3)
        self.assertNotEqual(verify_numerical_selection_for_move('0'), 4)
        self.assertNotEqual(verify_numerical_selection_for_move('0'), 5)
        self.assertNotEqual(verify_numerical_selection_for_move('0'), 6)
        self.assertNotEqual(verify_numerical_selection_for_move('0'), 7)
        self.assertNotEqual(verify_numerical_selection_for_move('0'), 8)

        self.assertNotEqual(verify_numerical_selection_for_move('1'), 0)
        self.assertNotEqual(verify_numerical_selection_for_move('1'), 2)
        self.assertNotEqual(verify_numerical_selection_for_move('1'), 3)
        self.assertNotEqual(verify_numerical_selection_for_move('1'), 4)
        self.assertNotEqual(verify_numerical_selection_for_move('1'), 5)
        self.assertNotEqual(verify_numerical_selection_for_move('1'), 6)
        self.assertNotEqual(verify_numerical_selection_for_move('1'), 7)
        self.assertNotEqual(verify_numerical_selection_for_move('1'), 8)

        self.assertNotEqual(verify_numerical_selection_for_move('2'), 1)
        self.assertNotEqual(verify_numerical_selection_for_move('2'), 0)
        self.assertNotEqual(verify_numerical_selection_for_move('2'), 3)
        self.assertNotEqual(verify_numerical_selection_for_move('2'), 4)
        self.assertNotEqual(verify_numerical_selection_for_move('2'), 5)
        self.assertNotEqual(verify_numerical_selection_for_move('2'), 6)
        self.assertNotEqual(verify_numerical_selection_for_move('2'), 7)
        self.assertNotEqual(verify_numerical_selection_for_move('2'), 8)

        self.assertNotEqual(verify_numerical_selection_for_move('3'), 1)
        self.assertNotEqual(verify_numerical_selection_for_move('3'), 2)
        self.assertNotEqual(verify_numerical_selection_for_move('3'), 0)
        self.assertNotEqual(verify_numerical_selection_for_move('3'), 4)
        self.assertNotEqual(verify_numerical_selection_for_move('3'), 5)
        self.assertNotEqual(verify_numerical_selection_for_move('3'), 6)
        self.assertNotEqual(verify_numerical_selection_for_move('3'), 7)
        self.assertNotEqual(verify_numerical_selection_for_move('3'), 8)

        self.assertNotEqual(verify_numerical_selection_for_move('4'), 1)
        self.assertNotEqual(verify_numerical_selection_for_move('4'), 2)
        self.assertNotEqual(verify_numerical_selection_for_move('4'), 3)
        self.assertNotEqual(verify_numerical_selection_for_move('4'), 0)
        self.assertNotEqual(verify_numerical_selection_for_move('4'), 5)
        self.assertNotEqual(verify_numerical_selection_for_move('4'), 6)
        self.assertNotEqual(verify_numerical_selection_for_move('4'), 7)
        self.assertNotEqual(verify_numerical_selection_for_move('4'), 8)

        self.assertNotEqual(verify_numerical_selection_for_move('5'), 1)
        self.assertNotEqual(verify_numerical_selection_for_move('5'), 2)
        self.assertNotEqual(verify_numerical_selection_for_move('5'), 3)
        self.assertNotEqual(verify_numerical_selection_for_move('5'), 4)
        self.assertNotEqual(verify_numerical_selection_for_move('5'), 0)
        self.assertNotEqual(verify_numerical_selection_for_move('5'), 6)
        self.assertNotEqual(verify_numerical_selection_for_move('5'), 7)
        self.assertNotEqual(verify_numerical_selection_for_move('5'), 8)

        self.assertNotEqual(verify_numerical_selection_for_move('6'), 1)
        self.assertNotEqual(verify_numerical_selection_for_move('6'), 2)
        self.assertNotEqual(verify_numerical_selection_for_move('6'), 3)
        self.assertNotEqual(verify_numerical_selection_for_move('6'), 4)
        self.assertNotEqual(verify_numerical_selection_for_move('6'), 5)
        self.assertNotEqual(verify_numerical_selection_for_move('6'), 0)
        self.assertNotEqual(verify_numerical_selection_for_move('6'), 7)
        self.assertNotEqual(verify_numerical_selection_for_move('6'), 8)

        self.assertNotEqual(verify_numerical_selection_for_move('7'), 1)
        self.assertNotEqual(verify_numerical_selection_for_move('7'), 2)
        self.assertNotEqual(verify_numerical_selection_for_move('7'), 3)
        self.assertNotEqual(verify_numerical_selection_for_move('7'), 4)
        self.assertNotEqual(verify_numerical_selection_for_move('7'), 5)
        self.assertNotEqual(verify_numerical_selection_for_move('7'), 6)
        self.assertNotEqual(verify_numerical_selection_for_move('7'), 0)
        self.assertNotEqual(verify_numerical_selection_for_move('7'), 8)

        self.assertNotEqual(verify_numerical_selection_for_move('8'), 1)
        self.assertNotEqual(verify_numerical_selection_for_move('8'), 2)
        self.assertNotEqual(verify_numerical_selection_for_move('8'), 3)
        self.assertNotEqual(verify_numerical_selection_for_move('8'), 4)
        self.assertNotEqual(verify_numerical_selection_for_move('8'), 5)
        self.assertNotEqual(verify_numerical_selection_for_move('8'), 6)
        self.assertNotEqual(verify_numerical_selection_for_move('8'), 7)
        self.assertNotEqual(verify_numerical_selection_for_move('8'), 0)

    def test_legal_move_condition1(self):
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "6", "7", "8"], 0), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "6", "7", "8"], 1), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "6", "7", "8"], 2), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "6", "7", "8"], 3), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "6", "7", "8"], 4), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "6", "7", "8"], 5), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "6", "7", "8"], 6), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "6", "7", "8"], 7), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "6", "7", "8"], 8), True)

        # if a move has been made and the same number is chosen
        self.assertEqual(legal_move(["X", "1", "2", "3", "4", "5", "6", "7", "8"], 0), False)
        self.assertEqual(legal_move(["O", "1", "2", "3", "4", "5", "6", "7", "8"], 0), False)
        self.assertEqual(legal_move(["0", "X", "2", "3", "4", "5", "6", "7", "8"], 1), False)
        self.assertEqual(legal_move(["0", "O", "2", "3", "4", "5", "6", "7", "8"], 1), False)
        self.assertEqual(legal_move(["0", "1", "X", "3", "4", "5", "6", "7", "8"], 2), False)
        self.assertEqual(legal_move(["0", "1", "O", "3", "4", "5", "6", "7", "8"], 2), False)
        self.assertEqual(legal_move(["0", "1", "2", "X", "4", "5", "6", "7", "8"], 3), False)
        self.assertEqual(legal_move(["0", "1", "2", "O", "4", "5", "6", "7", "8"], 3), False)
        self.assertEqual(legal_move(["0", "1", "2", "3", "X", "5", "6", "7", "8"], 4), False)
        self.assertEqual(legal_move(["0", "1", "2", "3", "O", "5", "6", "7", "8"], 4), False)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "X", "6", "7", "8"], 5), False)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "O", "6", "7", "8"], 5), False)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "X", "7", "8"], 6), False)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "O", "7", "8"], 6), False)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "6", "X", "8"], 7), False)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "6", "O", "8"], 7), False)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "6", "7", "X"], 8), False)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "6", "7", "O"], 8), False)

        # if a move has been made yet a different number is chosen
        self.assertEqual(legal_move(["0", "X", "2", "3", "4", "5", "6", "7", "8"], 0), True)
        self.assertEqual(legal_move(["0", "1", "X", "3", "4", "5", "6", "7", "8"], 1), True)
        self.assertEqual(legal_move(["0", "1", "2", "X", "4", "5", "6", "7", "8"], 2), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "X", "5", "6", "7", "8"], 3), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "X", "6", "7", "8"], 4), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "X", "7", "8"], 5), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "6", "X", "8"], 6), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "6", "7", "X"], 7), True)
        self.assertEqual(legal_move(["X", "1", "2", "3", "4", "5", "6", "7", "8"], 8), True)
        self.assertEqual(legal_move(["0", "O", "2", "3", "4", "5", "6", "7", "8"], 0), True)
        self.assertEqual(legal_move(["0", "1", "O", "3", "4", "5", "6", "7", "8"], 1), True)
        self.assertEqual(legal_move(["0", "1", "2", "O", "4", "5", "6", "7", "8"], 2), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "O", "5", "6", "7", "8"], 3), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "O", "6", "7", "8"], 4), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "O", "7", "8"], 5), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "6", "O", "8"], 6), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "6", "7", "O"], 7), True)
        self.assertEqual(legal_move(["O", "1", "2", "3", "4", "5", "6", "7", "8"], 8), True)

    def test_legal_move_condition2(self):
        # if a move has been made and a different number is chosen
        self.assertEqual(legal_move(["X", "1", "2", "3", "4", "5", "6", "7", "8"], 1), True)
        self.assertEqual(legal_move(["O", "1", "2", "3", "4", "5", "6", "7", "8"], 1), True)
        self.assertEqual(legal_move(["X", "1", "2", "3", "4", "5", "6", "7", "8"], 2), True)
        self.assertEqual(legal_move(["O", "1", "2", "3", "4", "5", "6", "7", "8"], 2), True)
        self.assertEqual(legal_move(["X", "1", "2", "3", "4", "5", "6", "7", "8"], 3), True)
        self.assertEqual(legal_move(["O", "1", "2", "3", "4", "5", "6", "7", "8"], 3), True)
        self.assertEqual(legal_move(["X", "1", "2", "3", "4", "5", "6", "7", "8"], 4), True)
        self.assertEqual(legal_move(["O", "1", "2", "3", "4", "5", "6", "7", "8"], 4), True)
        self.assertEqual(legal_move(["X", "1", "2", "3", "4", "5", "6", "7", "8"], 5), True)
        self.assertEqual(legal_move(["O", "1", "2", "3", "4", "5", "6", "7", "8"], 5), True)
        self.assertEqual(legal_move(["X", "1", "2", "3", "4", "5", "6", "7", "8"], 6), True)
        self.assertEqual(legal_move(["O", "1", "2", "3", "4", "5", "6", "7", "8"], 6), True)
        self.assertEqual(legal_move(["X", "1", "2", "3", "4", "5", "6", "7", "8"], 7), True)
        self.assertEqual(legal_move(["O", "1", "2", "3", "4", "5", "6", "7", "8"], 7), True)
        self.assertEqual(legal_move(["X", "1", "2", "3", "4", "5", "6", "7", "8"], 8), True)
        self.assertEqual(legal_move(["O", "1", "2", "3", "4", "5", "6", "7", "8"], 8), True)

        self.assertEqual(legal_move(["X", "1", "2", "3", "4", "5", "6", "7", "8"], 1), True)
        self.assertEqual(legal_move(["O", "1", "2", "3", "4", "5", "6", "7", "8"], 1), True)
        self.assertEqual(legal_move(["0", "X", "2", "3", "4", "5", "6", "7", "8"], 2), True)
        self.assertEqual(legal_move(["0", "O", "2", "3", "4", "5", "6", "7", "8"], 2), True)
        self.assertEqual(legal_move(["0", "1", "X", "3", "4", "5", "6", "7", "8"], 3), True)
        self.assertEqual(legal_move(["0", "1", "0", "3", "4", "5", "6", "7", "8"], 3), True)
        self.assertEqual(legal_move(["0", "1", "2", "X", "4", "5", "6", "7", "8"], 4), True)
        self.assertEqual(legal_move(["0", "1", "2", "O", "4", "5", "6", "7", "8"], 4), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "X", "5", "6", "7", "8"], 5), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "O", "5", "6", "7", "8"], 5), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "X", "6", "7", "8"], 6), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "O", "6", "7", "8"], 6), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "X", "7", "8"], 7), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "O", "7", "8"], 7), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "6", "X", "8"], 8), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "6", "O", "8"], 8), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "6", "7", "X"], 0), True)
        self.assertEqual(legal_move(["0", "1", "2", "3", "4", "5", "6", "7", "O"], 0), True)




    def test_game_over_condition1(self):
        self.assertEqual(game_over(["0", "1", "2", "3", "4", "5", "6", "7", "8"]), False)
        self.assertEqual(game_over(["X", "X", "X", "3", "O", "O", "6", "7", "8"]), True)
        self.assertEqual(game_over(["X", "X", "X", "O", "O", "5", "6", "7", "8"]), True)
        self.assertEqual(game_over(["X", "X", "X", "O", "4", "O", "6", "7", "8"]), True)
        self.assertEqual(game_over(["X", "X", "X", "O", "4", "5", "O", "7", "8"]), True)
        self.assertEqual(game_over(["X", "X", "X", "O", "4", "5", "6", "O", "8"]), True)
        self.assertEqual(game_over(["X", "X", "X", "O", "4", "5", "6", "7", "O"]), True)
        self.assertEqual(game_over(["X", "X", "X", "3", "O", "5", "O", "7", "8"]), True)
        self.assertEqual(game_over(["X", "X", "X", "3", "O", "5", "6", "O", "8"]), True)
        self.assertEqual(game_over(["X", "X", "X", "3", "O", "5", "6", "7", "O"]), True)
        self.assertEqual(game_over(["X", "X", "X", "3", "4", "O", "O", "7", "8"]), True)
        self.assertEqual(game_over(["X", "X", "X", "3", "4", "O", "6", "O", "8"]), True)
        self.assertEqual(game_over(["X", "X", "X", "3", "4", "O", "6", "7", "O"]), True)
        self.assertEqual(game_over(["X", "X", "X", "3", "4", "5", "O", "O", "8"]), True)
        self.assertEqual(game_over(["X", "X", "X", "3", "4", "5", "O", "7", "O"]), True)
        self.assertEqual(game_over(["X", "X", "X", "3", "4", "5", "6", "O", "O"]), True)

    def test_game_over_condition2(self):
        self.assertEqual(game_over(["X", "O", "O", "X", "4", "5", "X", "7", "8"]), True)
        self.assertEqual(game_over(["X", "O", "2", "X", "O", "5", "X", "7", "8"]), True)
        self.assertEqual(game_over(["X", "O", "2", "X", "4", "O", "X", "7", "8"]), True)
        self.assertEqual(game_over(["X", "O", "2", "X", "4", "5", "X", "O", "8"]), True)
        self.assertEqual(game_over(["X", "O", "2", "X", "4", "5", "X", "7", "O"]), True)
        self.assertEqual(game_over(["X", "1", "O", "X", "O", "5", "X", "7", "8"]), True)
        self.assertEqual(game_over(["X", "1", "O", "X", "4", "O", "X", "7", "8"]), True)
        self.assertEqual(game_over(["X", "1", "O", "X", "4", "5", "X", "O", "8"]), True)
        self.assertEqual(game_over(["X", "1", "O", "X", "4", "5", "X", "7", "O"]), True)
        self.assertEqual(game_over(["X", "1", "2", "X", "O", "O", "X", "7", "8"]), True)
        self.assertEqual(game_over(["X", "1", "2", "X", "O", "5", "X", "O", "8"]), True)
        self.assertEqual(game_over(["X", "1", "2", "X", "O", "5", "X", "7", "O"]), True)
        self.assertEqual(game_over(["X", "1", "2", "X", "4", "O", "X", "O", "8"]), True)
        self.assertEqual(game_over(["X", "1", "2", "X", "4", "O", "X", "7", "O"]), True)
        self.assertEqual(game_over(["X", "1", "2", "X", "4", "5", "X", "O", "O"]), True)

    def test_game_over_condition3(self):
        self.assertEqual(game_over(["X", "O", "O", "3", "X", "5", "6", "7", "X"]), True)
        self.assertEqual(game_over(["X", "O", "2", "O", "X", "5", "6", "7", "X"]), True)
        self.assertEqual(game_over(["X", "O", "2", "3", "X", "O", "6", "7", "X"]), True)
        self.assertEqual(game_over(["X", "O", "2", "3", "X", "5", "O", "7", "X"]), True)
        self.assertEqual(game_over(["X", "O", "2", "3", "X", "5", "6", "O", "X"]), True)
        self.assertEqual(game_over(["X", "1", "O", "O", "X", "5", "6", "7", "X"]), True)
        self.assertEqual(game_over(["X", "1", "O", "3", "X", "O", "6", "7", "X"]), True)
        self.assertEqual(game_over(["X", "1", "O", "3", "X", "5", "O", "7", "X"]), True)
        self.assertEqual(game_over(["X", "1", "O", "3", "X", "5", "6", "O", "X"]), True)
        self.assertEqual(game_over(["X", "1", "2", "O", "X", "O", "6", "7", "X"]), True)
        self.assertEqual(game_over(["X", "1", "2", "O", "X", "5", "O", "7", "X"]), True)
        self.assertEqual(game_over(["X", "1", "2", "O", "X", "5", "6", "O", "X"]), True)
        self.assertEqual(game_over(["X", "1", "2", "3", "X", "O", "O", "7", "X"]), True)
        self.assertEqual(game_over(["X", "1", "2", "3", "X", "O", "6", "O", "X"]), True)
        self.assertEqual(game_over(["X", "1", "2", "3", "X", "5", "O", "O", "X"]), True)

    def test_game_over_condition4(self):
        self.assertEqual(game_over(["O", "X", "O", "3", "X", "5", "6", "X", "8"]), True)
        self.assertEqual(game_over(["O", "X", "2", "O", "X", "5", "6", "X", "8"]), True)
        self.assertEqual(game_over(["O", "X", "2", "3", "X", "O", "6", "X", "8"]), True)
        self.assertEqual(game_over(["O", "X", "2", "3", "X", "5", "O", "X", "8"]), True)
        self.assertEqual(game_over(["O", "X", "2", "3", "X", "5", "6", "X", "O"]), True)
        self.assertEqual(game_over(["0", "X", "O", "O", "X", "5", "6", "X", "8"]), True)
        self.assertEqual(game_over(["0", "X", "O", "3", "X", "O", "6", "X", "O"]), True)
        self.assertEqual(game_over(["0", "X", "O", "3", "X", "5", "O", "X", "8"]), True)
        self.assertEqual(game_over(["0", "X", "O", "3", "X", "5", "6", "X", "O"]), True)
        self.assertEqual(game_over(["0", "X", "2", "O", "X", "O", "6", "X", "O"]), True)
        self.assertEqual(game_over(["0", "X", "2", "O", "X", "5", "O", "X", "8"]), True)
        self.assertEqual(game_over(["0", "X", "2", "O", "X", "5", "6", "X", "O"]), True)
        self.assertEqual(game_over(["0", "X", "2", "3", "X", "O", "O", "X", "8"]), True)
        self.assertEqual(game_over(["0", "X", "2", "3", "X", "O", "6", "X", "O"]), True)
        self.assertEqual(game_over(["0", "X", "2", "3", "X", "5", "O", "X", "O"]), True)

    def test_game_over_condition5(self):
        self.assertEqual(game_over(["O", "O", "2", "X", "X", "X", "6", "7", "8"]), True)
        self.assertEqual(game_over(["O", "1", "O", "X", "X", "X", "6", "7", "8"]), True)
        self.assertEqual(game_over(["O", "1", "2", "X", "X", "X", "O", "7", "8"]), True)
        self.assertEqual(game_over(["O", "1", "2", "X", "X", "X", "6", "O", "8"]), True)
        self.assertEqual(game_over(["O", "1", "2", "X", "X", "X", "6", "7", "O"]), True)
        self.assertEqual(game_over(["0", "O", "O", "X", "X", "X", "6", "7", "8"]), True)
        self.assertEqual(game_over(["0", "O", "2", "X", "X", "X", "O", "7", "8"]), True)
        self.assertEqual(game_over(["0", "O", "2", "X", "X", "X", "6", "O", "8"]), True)
        self.assertEqual(game_over(["0", "O", "2", "X", "X", "X", "6", "7", "O"]), True)
        self.assertEqual(game_over(["0", "1", "O", "X", "X", "X", "O", "7", "8"]), True)
        self.assertEqual(game_over(["0", "1", "O", "X", "X", "X", "6", "O", "8"]), True)
        self.assertEqual(game_over(["0", "1", "O", "X", "X", "X", "6", "7", "O"]), True)
        self.assertEqual(game_over(["0", "1", "2", "X", "X", "X", "O", "O", "8"]), True)
        self.assertEqual(game_over(["0", "1", "2", "X", "X", "X", "O", "7", "O"]), True)
        self.assertEqual(game_over(["0", "1", "2", "X", "X", "X", "6", "O", "O"]), True)

    def test_game_over_condition6(self):
        self.assertEqual(game_over(["O", "O", "2", "3", "4", "5", "X", "X", "X"]), True)
        self.assertEqual(game_over(["O", "1", "O", "3", "4", "5", "X", "X", "X"]), True)
        self.assertEqual(game_over(["O", "1", "2", "O", "4", "5", "X", "X", "X"]), True)
        self.assertEqual(game_over(["O", "1", "2", "3", "O", "5", "X", "X", "X"]), True)
        self.assertEqual(game_over(["O", "1", "2", "3", "4", "O", "X", "X", "X"]), True)
        self.assertEqual(game_over(["0", "O", "O", "3", "4", "5", "X", "X", "X"]), True)
        self.assertEqual(game_over(["0", "O", "2", "O", "4", "5", "X", "X", "X"]), True)
        self.assertEqual(game_over(["0", "O", "2", "3", "O", "5", "X", "X", "X"]), True)
        self.assertEqual(game_over(["0", "O", "2", "3", "4", "O", "X", "X", "X"]), True)
        self.assertEqual(game_over(["0", "1", "O", "O", "4", "5", "X", "X", "X"]), True)
        self.assertEqual(game_over(["0", "1", "O", "3", "O", "5", "X", "X", "X"]), True)
        self.assertEqual(game_over(["0", "1", "O", "3", "4", "O", "X", "X", "X"]), True)
        self.assertEqual(game_over(["0", "1", "2", "O", "O", "5", "X", "X", "X"]), True)
        self.assertEqual(game_over(["0", "1", "2", "O", "4", "O", "X", "X", "X"]), True)
        self.assertEqual(game_over(["0", "1", "2", "3", "O", "O", "X", "X", "X"]), True)

    def test_game_over_condition7(self):
        self.assertEqual(game_over(["O", "O", "X", "3", "X", "5", "X", "7", "8"]), True)
        self.assertEqual(game_over(["O", "1", "X", "O", "X", "5", "X", "7", "8"]), True)
        self.assertEqual(game_over(["O", "1", "X", "3", "X", "O", "X", "7", "8"]), True)
        self.assertEqual(game_over(["O", "1", "X", "3", "X", "5", "X", "O", "8"]), True)
        self.assertEqual(game_over(["O", "1", "X", "3", "X", "5", "X", "7", "O"]), True)
        self.assertEqual(game_over(["0", "O", "X", "O", "X", "5", "X", "7", "8"]), True)
        self.assertEqual(game_over(["0", "O", "X", "3", "X", "O", "X", "7", "8"]), True)
        self.assertEqual(game_over(["0", "O", "X", "3", "X", "5", "X", "O", "8"]), True)
        self.assertEqual(game_over(["0", "O", "X", "3", "X", "5", "X", "7", "O"]), True)
        self.assertEqual(game_over(["0", "1", "X", "O", "X", "O", "X", "7", "8"]), True)
        self.assertEqual(game_over(["0", "1", "X", "O", "X", "5", "X", "O", "8"]), True)
        self.assertEqual(game_over(["0", "1", "X", "O", "X", "5", "X", "7", "O"]), True)
        self.assertEqual(game_over(["0", "1", "X", "3", "X", "O", "X", "O", "8"]), True)
        self.assertEqual(game_over(["0", "1", "X", "3", "X", "O", "X", "7", "O"]), True)
        self.assertEqual(game_over(["0", "1", "X", "3", "X", "5", "X", "O", "O"]), True)

    def test_game_over_condition8(self):
        self.assertEqual(game_over(["O", "O", "X", "3", "4", "X", "6", "7", "X"]), True)
        self.assertEqual(game_over(["O", "1", "X", "O", "4", "X", "6", "7", "X"]), True)
        self.assertEqual(game_over(["O", "1", "X", "3", "O", "X", "6", "7", "X"]), True)
        self.assertEqual(game_over(["O", "1", "X", "3", "4", "X", "O", "7", "X"]), True)
        self.assertEqual(game_over(["O", "1", "X", "3", "4", "X", "6", "O", "X"]), True)
        self.assertEqual(game_over(["0", "O", "X", "O", "4", "X", "6", "7", "X"]), True)
        self.assertEqual(game_over(["0", "O", "X", "3", "O", "X", "6", "7", "X"]), True)
        self.assertEqual(game_over(["0", "O", "X", "3", "4", "X", "O", "7", "X"]), True)
        self.assertEqual(game_over(["0", "O", "X", "3", "4", "X", "6", "O", "X"]), True)
        self.assertEqual(game_over(["0", "1", "X", "O", "O", "X", "6", "7", "X"]), True)
        self.assertEqual(game_over(["0", "1", "X", "O", "4", "X", "O", "7", "X"]), True)
        self.assertEqual(game_over(["0", "1", "X", "O", "4", "X", "6", "O", "X"]), True)
        self.assertEqual(game_over(["0", "1", "X", "3", "O", "X", "O", "7", "X"]), True)
        self.assertEqual(game_over(["0", "1", "X", "3", "O", "X", "6", "O", "X"]), True)
        self.assertEqual(game_over(["0", "1", "X", "3", "4", "X", "O", "O", "X"]), True)



    def test_there_is_a_winner_X(self):
        self.assertEqual(there_is_a_winner(["X", "X", "X", "3", "4", "5", "6", "7", "8"]), True)
        self.assertEqual(there_is_a_winner(["0", "1", "2", "X", "X", "X", "6", "7", "8"]), True)
        self.assertEqual(there_is_a_winner(["0", "1", "2", "3", "4", "5", "X", "X", "X"]), True)
        self.assertEqual(there_is_a_winner(["X", "1", "1", "X", "4", "5", "X", "7", "8"]), True)
        self.assertEqual(there_is_a_winner(["0", "X", "2", "3", "X", "5", "6", "X", "8"]), True)
        self.assertEqual(there_is_a_winner(["0", "1", "X", "3", "4", "X", "6", "7", "X"]), True)
        self.assertEqual(there_is_a_winner(["X", "1", "2", "3", "X", "5", "6", "7", "X"]), True)
        self.assertEqual(there_is_a_winner(["0", "1", "X", "3", "X", "5", "X", "7", "8"]), True)

    def test_there_is_a_winner_O(self):
        self.assertEqual(there_is_a_winner(["O", "O", "O", "3", "4", "5", "6", "7", "8"]), True)
        self.assertEqual(there_is_a_winner(["0", "1", "2", "O", "O", "O", "6", "7", "8"]), True)
        self.assertEqual(there_is_a_winner(["0", "1", "2", "3", "4", "5", "O", "O", "O"]), True)
        self.assertEqual(there_is_a_winner(["O", "1", "2", "O", "4", "5", "O", "7", "8"]), True)
        self.assertEqual(there_is_a_winner(["0", "O", "2", "3", "O", "5", "6", "O", "8"]), True)
        self.assertEqual(there_is_a_winner(["0", "1", "O", "3", "4", "O", "6", "7", "O"]), True)
        self.assertEqual(there_is_a_winner(["O", "1", "2", "3", "O", "5", "6", "7", "O"]), True)
        self.assertEqual(there_is_a_winner(["0", "1", "O", "3", "O", "5", "O", "7", "8"]), True)





if __name__ == '__main__':
    unittest.main()